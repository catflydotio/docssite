<p>If you&#39;ve been developing web applications for long, you&#39;ve probably heard of <a href="https://nginx.org/en/">Nginx</a>. It&#39;s a widely used open-source HTTP server, but it has some limitations. By default, Nginx doesn&#39;t provide a way to program logical operators or write custom logic. Developers can circumvent this by using modules like <a href="https://www.nginx.com/blog/introduction-nginscript/">Nginx JavaScript</a> or <a href="https://github.com/openresty/lua-nginx-module">Lua</a>, but that takes extra work to install and configure.</p>
<p><a href="https://openresty.org/en/">OpenResty</a> allows you to build full-fledged web applications by bundling Nginx with a Lua compiler and several common modules. This makes OpenResty more broadly useful than vanilla Nginx, but depending on your use case, it could be overkill.</p>
<p>For example, if you want to <a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/">run a simple reverse proxy</a> on your server, Nginx can handle it. If you need to add rate limiting, authentication, advanced caching, or a connection to a database, you&#39;ll need a solution like OpenResty. With the increase in distributed computing and microservices, OpenResty has become an excellent option for complex firewalls, API gateways, and even full-fledged web applications.</p>
<p>Typically, OpenResty is deployed to a central server. Web requests go through OpenResty before being routed to the relevant backing services, but this model isn&#39;t great for performance or redundancy. While you can set up several servers and run OpenResty on each, you have to figure out how to maintain and sync data across them.</p>
<p>A better solution is to use a distributed hosting platform like <a href="https://fly.io">Fly</a> to run OpenResty at the edge. Using Fly will decrease latency while ensuring that a single node&#39;s failure doesn&#39;t make your website unavailable.</p>
<p><img src="https://github.com/fly-examples/openresty-basic/raw/main/fly-2020-07-29-a.jpg" alt="Running OpenResty on Fly.io" /></p>
<h2 id='how-to-deploy-openresty-to-fly' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#how-to-deploy-openresty-to-fly' aria-label='Anchor'></a>How to Deploy OpenResty to Fly</h2><p>In this tutorial, you&#39;ll see how to create an OpenResty application and deploy it to Fly. You&#39;ll create a reverse proxy endpoint that uses the <a href="https://jsonplaceholder.typicode.com/">JSON Placeholder API</a> as a backend service. You&#39;ll use a custom Lua script to add rate limiting, and the Fly Redis connection to add API key authentication to your endpoint. All the steps you need are in this tutorial, but if you&#39;d like to download the final application, it&#39;s <a href="https://github.com/karllhughes/fly-openresty">available on Github</a> as well.</p>
<h3 id='prerequisites' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#prerequisites' aria-label='Anchor'></a>Prerequisites</h3>
<ul>
<li><a href="https://fly.io/docs/flyctl/installing/">Flyctl command line tool</a>.
</li></ul>
<h3 id='preparing-to-fly' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#preparing-to-fly' aria-label='Anchor'></a>Preparing to Fly</h3><p>To start, create a new directory called <code>fly-openresty</code> and we&#39;ll create your new app inside of it:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nb">mkdir </span>fly-openresty <span class="o">&amp;&amp;</span> <span class="nb">cd </span>fly-openresty
</code></pre></div><h3 id='configuring-the-dockerfile' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#configuring-the-dockerfile' aria-label='Anchor'></a>Configuring the Dockerfile</h3><p>Fly will build and run your Docker image in a <a href="https://fly.io/docs/architecture/#microvms">Firecracker VM</a> on the edge, but you need to select and configure a Dockerfile first.</p>
<p>OpenResty provides <a href="https://github.com/openresty/docker-openresty">several Docker images</a> you can use for your application. I opted for Centos, but because of <a href="https://github.com/openresty/docker-openresty/issues/124">an apparent bug in their Docker image</a>, specified the <code>1.15.8.1-4-centos</code> tag.</p>
<p>After selecting the base image, add a <code>RUN</code> command to append <code>env FLY_REDIS_CACHE_URL</code> to the top of your <code>/usr/local/openresty/nginx/conf/nginx.conf</code> file. This line ensures that Nginx has access to the <code>FLY_REDIS_CACHE_URL</code> environment variable.</p>
<p>Finally, remove the default Nginx site configuration files and add <code>default.conf</code> file to the <code>/etc/nginx/conf.d/</code> directory. When done, your Dockerfile should look something like this:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight dockerfile'><code><span class="c"># Using this base image because of: https://github.com/openresty/docker-openresty/issues/124</span>
<span class="k">FROM</span><span class="s"> openresty/openresty:1.15.8.1-4-centos</span>

<span class="c"># Add the REDIS connection URL as an env variable in NGINX</span>
<span class="k">RUN </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"env FLY_REDIS_CACHE_URL;</span><span class="se">\n</span><span class="si">$(</span><span class="nb">cat</span> /usr/local/openresty/nginx/conf/nginx.conf<span class="si">)</span><span class="s2">"</span> <span class="o">&gt;</span> /usr/local/openresty/nginx/conf/nginx.conf

<span class="c"># Add the configuration file</span>
<span class="k">RUN </span><span class="nb">rm</span> /etc/nginx/conf.d/<span class="k">*</span>
<span class="k">COPY</span><span class="s"> default.conf /etc/nginx/conf.d/default.conf</span>
</code></pre></div><p>Now that your Dockerfile is ready, you need to create the <code>default.conf</code> file before you can deploy your application to Fly.</p>
<h3 id='setting-up-the-nginx-configuration' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setting-up-the-nginx-configuration' aria-label='Anchor'></a>Setting Up the Nginx Configuration</h3><p>Before you add rate limiting and Redis to your Nginx configuration, start with a simple reverse proxy configuration.</p>
<p>To set up your reverse proxy, create a <code>default.conf</code> file in your root directory and add the following:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight conf'><code><span class="n">server</span> {
    <span class="n">listen</span> <span class="m">80</span>;
    <span class="n">location</span> /<span class="n">api</span>/ {
        <span class="n">proxy_pass</span> <span class="n">http</span>://<span class="n">jsonplaceholder</span>.<span class="n">typicode</span>.<span class="n">com</span>/<span class="n">posts</span>/;
    }
}
</code></pre></div><p>This minimal Nginx configuration listens to requests on port 80 and reverse proxies any request to <code>/api/</code> to the JSON Placeholder API. Now that your Dockerfile and Nginx configuration are ready, you can create and deploy your reverse proxy to Fly.</p>
<h3 id='creating-a-new-fly-application' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#creating-a-new-fly-application' aria-label='Anchor'></a>Creating a New Fly Application</h3><p>You&#39;ll need to use <code>flyctl</code> to create a new application. If you haven&#39;t already, install the appropriate version of <code>flyctl</code> for your operating system using the <a href="https://fly.io/docs/hands-on/installing/">instructions here</a>.</p>
<p>Next, <a href="https://fly.io/docs/hands-on/sign-up/">sign up</a> or <a href="https://fly.io/docs/hands-on/sign-in/">sign in</a> to your Fly account via the command line:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="c"># Sign up</span>
flyctl auth signup

<span class="c"># Or sign in</span>
flyctl auth login
</code></pre></div><p>You can now create your new app in the fly-openresty directory using the fly <code>init</code> command:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>flyctl init <span class="nt">--port</span> 80
</code></pre></div><p>The <code>--port 80</code> says our application communicates on port 80.</p>
<p>You&#39;ll be prompted for an app name. Use the auto-generated app name, select your organization, and select <code>Dockerfile</code> as your builder. You should see output similar to this in your console:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>? App Name <span class="o">(</span>leave blank to use an auto-generated name<span class="o">)</span> 

? Select organization: YOUR ORGANIZATION

? Select builder: Dockerfile
    <span class="o">(</span>Create an example Dockerfile<span class="o">)</span>

New app created
  Name     <span class="o">=</span> &lt;your-app-name&gt;  
  Owner    <span class="o">=</span> &lt;your-name&gt;
  Version  <span class="o">=</span> 0               
  Status   <span class="o">=</span>                 
  Hostname <span class="o">=</span> &lt;empty&gt;         

Wrote config file fly.toml
</code></pre></div><p>Fly will create a <code>fly.toml</code> file in the your project&#39;s directoy and set the <code>internal_port</code> to 80 so that requests are properly routed to OpenResty.</p>
<p>Now you&#39;re ready to deploy your application using the command line:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>flyctl deploy
</code></pre></div><p>You should see Fly build your Docker image and push it to Fly to deploy it. When finished, you&#39;ll see output similar to the following:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>Deploying &lt;your-app-name&gt;
<span class="o">==&gt;</span> Validating App Configuration
<span class="nt">--</span><span class="o">&gt;</span> Validating App Configuration <span class="k">done
</span>Services
TCP 80/443 ⇢ 80

Deploy <span class="nb">source </span>directory <span class="s1">'/Users/karl/fly-openresty'</span>
Docker daemon available, performing <span class="nb">local </span>build...
<span class="o">==&gt;</span> Building with Dockerfile
Using Dockerfile: /Users/karl/fly-openresty/Dockerfile
...
<span class="nt">--</span><span class="o">&gt;</span> Done Pushing Image
<span class="o">==&gt;</span> Optimizing Image
<span class="nt">--</span><span class="o">&gt;</span> Done Optimizing Image
<span class="o">==&gt;</span> Creating Release
Release v1 created
Monitoring Deployment
You can detach the terminal anytime without stopping the deployment

1 desired, 1 placed, 1 healthy, 0 unhealthy <span class="o">[</span>health checks: 1 total, 1 passing]
<span class="nt">--</span><span class="o">&gt;</span> v1 deployed successfully
</code></pre></div><p>Your reverse proxy is now live on Fly! You can visit it and see the JSON Placeholder data using the Fly command line tool:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>flyctl open /api 
</code></pre></div><p>In the next two sections, you&#39;ll see how to add rate limiting and authentication using a Redis store and custom Lua scripts.</p>
<h3 id='adding-rate-limiting' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#adding-rate-limiting' aria-label='Anchor'></a>Adding Rate Limiting</h3><p>Nginx reads and applies all the configuration files in the <code>/etc/nginx/conf.d/</code> directory. Because OpenResty adds the Lua compiler to Nginx, you can write <a href="http://www.lua.org/">Lua code</a> inside your <code>default.conf</code> file. To add rate limiting, you can use the <a href="https://github.com/openresty/lua-resty-limit-traffic">lua-resty-limit-traffic</a> library that comes with OpenResty and customize its behavior in your Nginx configuration file.</p>
<p>Open your <code>default.conf</code> file and replace it with the following:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight conf'><code><span class="n">lua_shared_dict</span> <span class="n">my_limit_req_store</span> <span class="m">100</span><span class="n">m</span>;

<span class="n">server</span> {
    <span class="n">listen</span> <span class="m">80</span>;
    <span class="n">location</span> /<span class="n">api</span>/ {
        <span class="n">access_by_lua_block</span> {
            -- <span class="n">RATE</span> <span class="n">LIMITER</span> --
            <span class="n">local</span> <span class="n">limit_req</span> = <span class="n">require</span> <span class="s2">"resty.limit.req"</span>

            -- <span class="n">Allow</span> .<span class="m">5</span> <span class="n">requests</span> <span class="n">per</span> <span class="n">second</span> --
            <span class="n">local</span> <span class="n">lim</span>, <span class="n">err</span> = <span class="n">limit_req</span>.<span class="n">new</span>(<span class="s2">"my_limit_req_store"</span>, .<span class="m">5</span>, .<span class="m">5</span>)
            <span class="n">if</span> <span class="n">not</span> <span class="n">lim</span> <span class="n">then</span>
                <span class="n">ngx</span>.<span class="n">log</span>(<span class="n">ngx</span>.<span class="n">ERR</span>, <span class="s2">"failed to instantiate a resty.limit.req object: "</span>, <span class="n">err</span>)
                <span class="n">return</span> <span class="n">ngx</span>.<span class="n">exit</span>(<span class="m">500</span>)
            <span class="n">end</span>

            -- <span class="n">Use</span> <span class="n">the</span> <span class="n">visitor</span><span class="err">'</span><span class="n">s</span> <span class="n">IP</span> <span class="n">addres</span> <span class="n">as</span> <span class="n">a</span> <span class="n">key</span> --
            <span class="n">local</span> <span class="n">key</span> = <span class="n">ngx</span>.<span class="n">var</span>.<span class="n">http_fly_client_ip</span>
            <span class="n">local</span> <span class="n">delay</span>, <span class="n">err</span> = <span class="n">lim</span>:<span class="n">incoming</span>(<span class="n">key</span>, <span class="n">true</span>)

            -- <span class="n">Throw</span> <span class="n">an</span> <span class="n">error</span> <span class="n">when</span> <span class="n">the</span> <span class="n">limit</span> <span class="n">is</span> <span class="n">reached</span> --
            <span class="n">if</span> <span class="n">err</span> == <span class="s2">"rejected"</span> <span class="n">then</span>
                <span class="n">ngx</span>.<span class="n">log</span>(<span class="n">ngx</span>.<span class="n">ERR</span>, <span class="s2">"Limit reached: "</span>, <span class="n">err</span>)
                <span class="n">return</span> <span class="n">ngx</span>.<span class="n">exit</span>(<span class="m">503</span>)
            <span class="n">end</span>
        }

        <span class="n">proxy_pass</span> <span class="n">http</span>://<span class="n">jsonplaceholder</span>.<span class="n">typicode</span>.<span class="n">com</span>/<span class="n">posts</span>/;
    }
}
</code></pre></div><p>This configuration passes your request through using the <code>proxy_pass</code> directive at the end, as the previous version did. Before it does, it checks if the visitor has reached their request limit using the <code>Fly-Client-IP</code> header <a href="https://fly.io/docs/services/#http">attached to the request by Fly</a>. If the IP address has called the endpoint in the past 2 seconds, it returns a 503 response and logs the error.</p>
<p>You can re-deploy this configuration file to Fly (again using <code>flyctl deploy</code>) and call the endpoint twice in quick succession to test it.</p>
<p>You&#39;ve now got a working rate limiter, but you&#39;re still not finished. In the last section, you&#39;ll see how to connect your OpenResty application to Redis to store API keys that can be used for authentication.</p>
<h3 id='checking-api-keys-against-a-redis-store' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#checking-api-keys-against-a-redis-store' aria-label='Anchor'></a>Checking API Keys Against a Redis Store</h3><p>Fly offers a <a href="https://fly.io/docs/redis/">region-local Redis instance</a> to all deployments, which can be used to persist data for longer periods. While this volatile datastore is not meant for permanent use, you can use it to cache data so that it&#39;s accessible on the edge.</p>
<p>In this last step, you&#39;ll connect to the Fly Redis instance using the OpenResty <a href="https://github.com/openresty/lua-resty-redis">Redis driver</a>. You&#39;ll authenticate requests using a <code>key</code> passed in by the user through a query string argument and return a 401 response code if authentication fails. In a real application, you would probably push data to the Fly Redis instance using <a href="https://fly.io/docs/redis/#managing-redis-data-globally">their global data store</a>, but because this is a demonstration app, you&#39;ll hard code a few sample API keys.</p>
<p>First, write a Lua script to parse the connection string. Fly&#39;s <code>FLY_REDIS_CACHE_URL</code> must be split at the <code>:</code> and <code>@</code> characters, so you can write a function that takes any number of characters as possible delimiters (<a href="https://stackoverflow.com/a/29497100/977192">credit to Walt Howard on Stack Overflow</a> for this one). Create a new file called <code>split.lua</code> and add the following:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight lua'><code><span class="kd">local</span> <span class="n">_M</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">function</span> <span class="nc">_M</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">delimiters</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">elements</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kd">local</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s1">'([^'</span><span class="o">..</span><span class="n">delimiters</span><span class="o">..</span><span class="s1">']+)'</span>
    <span class="nb">string.gsub</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">pattern</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="n">elements</span><span class="p">[</span><span class="o">#</span><span class="n">elements</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span>     <span class="n">value</span><span class="p">;</span>  <span class="k">end</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">elements</span>
<span class="k">end</span>
<span class="k">return</span> <span class="n">_M</span>
</code></pre></div><p>Next, you need to make sure this file is copied into your Docker image, so open up your <code>Dockerfile</code> and add the following line to the end of it:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight dockerfile'><code>...
<span class="k">COPY</span><span class="s"> split.lua /etc/nginx/conf.d/split.lua</span>
</code></pre></div><p>Finally, you&#39;re ready to update your <code>default.conf</code> file. Open it and edit it as shown below:</p>
<div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight conf'><code><span class="n">lua_shared_dict</span> <span class="n">my_limit_req_store</span> <span class="m">100</span><span class="n">m</span>;
<span class="n">lua_package_path</span> <span class="s2">"/etc/nginx/conf.d/?.lua;;"</span>;
-- <span class="n">Ensures</span> <span class="n">that</span> <span class="n">the</span> <span class="n">Redis</span> <span class="n">connection</span><span class="err">'</span><span class="n">s</span> <span class="n">DNS</span> <span class="n">resolves</span> --
<span class="n">resolver</span> <span class="m">8</span>.<span class="m">8</span>.<span class="m">8</span>.<span class="m">8</span>;

<span class="n">server</span> {
    <span class="n">listen</span> <span class="m">80</span>;
    <span class="n">location</span> /<span class="n">api</span>/ {
        <span class="n">access_by_lua_block</span> {
            -- <span class="n">RATE</span> <span class="n">LIMITER</span> --
            ...

            -- <span class="n">REDIS</span> <span class="n">CACHE</span> --
            <span class="n">splitter</span> = <span class="n">require</span>(<span class="s2">"split"</span>)
            <span class="n">local</span> <span class="n">redis_client</span> = <span class="n">require</span> <span class="s2">"resty.redis"</span>
            <span class="n">local</span> <span class="n">redis</span> = <span class="n">redis_client</span>:<span class="n">new</span>()

            <span class="n">redis</span>:<span class="n">set_timeouts</span>(<span class="m">1000</span>, <span class="m">1000</span>, <span class="m">1000</span>)

            -- <span class="n">Split</span> <span class="n">the</span> <span class="n">connection</span> <span class="n">string</span> <span class="n">env</span> <span class="n">variable</span> --
            <span class="n">parts</span> = <span class="n">splitter</span>.<span class="n">split</span>(<span class="n">os</span>.<span class="n">getenv</span>(<span class="s2">"FLY_REDIS_CACHE_URL"</span>), <span class="s2">":@"</span>)

            -- <span class="n">Connect</span> <span class="n">to</span> <span class="n">Redis</span> --
            <span class="n">local</span> <span class="n">res</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">connect</span>(<span class="n">parts</span>[<span class="m">4</span>], <span class="n">parts</span>[<span class="m">5</span>])
            <span class="n">if</span> <span class="n">not</span> <span class="n">res</span> <span class="n">then</span>
                <span class="n">ngx</span>.<span class="n">log</span>(<span class="n">ngx</span>.<span class="n">ERR</span>, <span class="s2">"failed to connect: "</span>, <span class="n">err</span>)
                <span class="n">return</span>
            <span class="n">end</span>

            -- <span class="n">Authorize</span> <span class="n">using</span> <span class="n">the</span> <span class="n">password</span> --
            <span class="n">local</span> <span class="n">res</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">auth</span>(<span class="n">parts</span>[<span class="m">3</span>])
            <span class="n">if</span> <span class="n">not</span> <span class="n">res</span> <span class="n">then</span>
                <span class="n">ngx</span>.<span class="n">log</span>(<span class="n">ngx</span>.<span class="n">ERR</span>, <span class="s2">"failed to authenticate: "</span>, <span class="n">err</span>)
                <span class="n">return</span>
            <span class="n">end</span>

            -- <span class="n">Set</span> <span class="n">some</span> <span class="n">allowed</span> <span class="n">API</span> <span class="n">keys</span> --
            -- <span class="n">Note</span>: <span class="n">This</span> <span class="n">should</span> <span class="n">be</span> <span class="n">done</span> <span class="n">outside</span> <span class="n">this</span> <span class="n">script</span> <span class="n">in</span> <span class="n">a</span> <span class="n">real</span> <span class="n">app</span> --
            <span class="n">ok</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">set</span>(<span class="s2">"oVr0mDgJejSmb9jwXp6B"</span>, <span class="m">1</span>)
            <span class="n">ok</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">set</span>(<span class="s2">"AstIqxOHpyAToCwh8qeL"</span>, <span class="m">2</span>)
            <span class="n">ok</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">set</span>(<span class="s2">"eaFW03Pjp27ZbgqpgqJQ"</span>, <span class="m">3</span>)

            -- <span class="n">Lookup</span> <span class="n">the</span> `<span class="n">key</span>` --
            <span class="n">local</span> <span class="n">res</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">get</span>(<span class="n">ngx</span>.<span class="n">var</span>.<span class="n">arg_key</span>)
            <span class="n">if</span> (<span class="n">not</span> <span class="n">res</span>) <span class="n">or</span> (<span class="n">res</span> == <span class="n">ngx</span>.<span class="n">null</span>) <span class="n">then</span>
                <span class="n">ngx</span>.<span class="n">log</span>(<span class="n">ngx</span>.<span class="n">ERR</span>, <span class="s2">"Invalid key: "</span>, <span class="n">err</span>)
                <span class="n">return</span> <span class="n">ngx</span>.<span class="n">exit</span>(<span class="m">401</span>)
            <span class="n">end</span>

            -- <span class="n">Close</span> <span class="n">the</span> <span class="n">connection</span> --
            <span class="n">local</span> <span class="n">res</span>, <span class="n">err</span> = <span class="n">redis</span>:<span class="n">close</span>()
            <span class="n">if</span> <span class="n">not</span> <span class="n">res</span> <span class="n">then</span>
                <span class="n">ngx</span>.<span class="n">say</span>(<span class="s2">"failed to close: "</span>, <span class="n">err</span>)
                <span class="n">return</span>
            <span class="n">end</span>
        }

        <span class="n">proxy_pass</span> <span class="n">http</span>://<span class="n">jsonplaceholder</span>.<span class="n">typicode</span>.<span class="n">com</span>/<span class="n">posts</span>/;
    }
}
</code></pre></div><p>Deploy this updated configuration file using <code>flyctl deploy</code> and visit <code>https://&lt;your-app-name&gt;.fly.dev/api/</code> again. This time, you will get a 401 response from OpenResty. Add one of the API keys you hard-coded as a <code>key</code> in the query string: <code>https://&lt;your-app-name&gt;.fly.dev/api/?key=AstIqxOHpyAToCwh8qeL</code> and you&#39;ll see the JSON placeholder data again.</p>
<h2 id='conclusion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#conclusion' aria-label='Anchor'></a>Conclusion</h2><p>In this post, you&#39;ve seen how to create an OpenResty application to extend Nginx&#39;s functionality. You&#39;ve added rate-limiting to ensure that users don&#39;t abuse your API and simple authentication using data cached in Redis. Finally, by deploying the application on Fly, you can take advantage of their globally distributed edge hosting environment to make your app faster and more reliable than it would be on traditional hosting.</p>
<p>If you have any questions about using OpenResty with <a href="https://fly.io/">Fly.io</a>, be sure to reach out so we can help you get started.</p>
